/*
  @author Pete Pongpeauk (restrafes) <pete@restrafes.co>
  @author Evelyn Holloway <eholl2004@gmail.com>

  Copyright (c) 2021 EVE
  All rights reserved.
*/

// core imports
import React, { useRef, useState, useEffect } from "react";
import { Link, useHistory } from "react-router-dom";

// external imports
import PageHeader from "components/PageHeader.js";
import Loader from "components/Loader";
import * as Icon from '@material-ui/icons';

// authentication
import firebase from "firebase/app";
import "firebase/firestore";
import { useAuth } from "contexts/AuthContext";

export default function Signup() {
  // loading state
  const [isLoading, setLoading] = useState(true);

  // error state
  const [error, setError] = useState();

  // site configuration
  const [siteConfig, setSiteConfig] = useState({});

  // element references
  const nameRef = useRef();
  const usernameRef = useRef();
  const emailRef = useRef();
  const passwordRef = useRef();
  const confirmPasswordRef = useRef();

  // authentication
  const { signup, database, userCredential } = useAuth();

  // history
  const history = useHistory();

  function isUsernameInvalid(username) {
    const allowedCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
    if (username.length < 4 || username.length > 24) {
      return "your username must be between 3 to 24 characters long!";
    }
    for (let i = 0; i < username.length; i++) {
      if (allowedCharacters.indexOf(username[i]) === -1) {
        return "your username can only contain letters, numbers, and underscores!";
      }
    }
    return false;
  }

  // create information for the user, signup will fire an exception and the lines below will not run if there is an error
  // create the main user profile with its document name set to the created user's uid generated by firebase
  useEffect(() => {
    if (userCredential) {
      database.collection("users").doc(userCredential.uid).set({
        username: usernameRef.current.value.toLowerCase(),
        elevation: 0, elevationName: "regular user",
        profile: {
          name: nameRef.current.value,
          about: null,
          website: null,
          avatar: "https://cdn.restrafes.co/xcs/default_profile_image.png"
        },
        preferences: {},
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      }, { merge: true })
      console.log("created a new account!")
      setLoading(false);
      history.push("/");
    }
  }, [userCredential]);

  async function handleSubmit(e) {
    e.preventDefault(); // prevent default form submit behavior
    setError(null); setLoading(true);
    // field checks
    if (passwordRef.current.value !== confirmPasswordRef.current.value) {
      setLoading(false);
      return setError("passwords don't match! please try again.");
    }
    if (!(nameRef.current.value && emailRef.current.value && passwordRef.current.value && confirmPasswordRef.current.value)) {
      setLoading(false);
      return setError("please fill out all fields.");
    }
    const usernameInvalid = isUsernameInvalid(usernameRef.current.value);
    if (usernameInvalid) {
      setLoading(false);
      return setError(usernameInvalid);
    }
    try {
      // refuse to sign up if disabled by the server
      if (!siteConfig.signupEnabled) {
        setLoading(false);
        return setError("unfortunately, signups are not enabled at this time. please try again later.");
      } else {
        // check to see if the username provided is taken
        await database.collection("users").where("username", "==", usernameRef.current.value.toLowerCase()).get().then(async (users) => {
          if (users.size > 0) {
            setLoading(false);
            return setError("that username is already taken. please try again.");
          } else {
            await signup(emailRef.current.value, passwordRef.current.value);
          }
        });
      }
    } catch (e) {
      // if there is an error, set the error message
      let errorMessage = null;
      switch (e.code) {
        case "auth/email-already-in-use":
          errorMessage = "this email address is already in use.";
          break;
        case "auth/invalid-email":
          errorMessage = "the email address you entered is invalid. please try again.";
          break;
        case "auth/weak-password":
          errorMessage = "the password you entered is too weak. please try again.";
          break;
        default:
          errorMessage = "there was a problem while trying to perform the requested action. please try again later. " + e.message;
          break;
      }
      setError(errorMessage);
    }
    // set loading state to false
    setLoading(false);
  }

  // unset the loading state once the page finishes rendering
  useEffect(() => {
    database.doc("siteConfig/auth").get().then(async (doc) => {
      const data = doc.data();
      setSiteConfig(data)
    });
    setLoading(false);
  }, []);

  return (
    <div className="eve">
      <PageHeader title="Signup" />
      <Loader
        className={`loader loader-${(!isLoading ? "not-" : "")}visible`}
        visible={true}
      />
      <form onSubmit={handleSubmit} className="center-to-screen form-auth" style={{ display: "flex", flexDirection: "column", height: "auto", justifyContent: "center", alignItems: "center", maxWidth: "15vw", minWidth: "300px" }}>
        <h1>{process.env.REACT_APP_APP_TITLE}</h1>
        <h2>/ SIGNUP</h2>
        <br />
        {error &&
          <alert className="danger">
            <div>
              <h2 style={{ textAlign: "left" }}>ERROR</h2>
              <p style={{ textAlign: "left", width: "100%" }}>{error}</p>
            </div>
          </alert>
        }
        <div className="flex flex-column" style={{ width: "auto" }}>
          <input ref={nameRef} type="name" placeholder="name" className="input-box" name="name"></input>
          <input ref={usernameRef} type="username" placeholder="username" className="input-box" name="username"></input>
          <input ref={emailRef} type="email" placeholder="email" className="input-box" name="email"></input>
          <input ref={passwordRef} type="password" placeholder="password" className="input-box" name="password"></input>
          <input ref={confirmPasswordRef} type="password" placeholder="password (confirm)" className="input-box" name="password-confirm"></input>
          <button type="submit" disabled={isLoading} className="input-box submit-button button">
            <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
              <span>continue</span>
              <Icon.ChevronRight style={{ paddingLeft: "0.25rem" }} />
            </div>
          </button>
        </div>
        <p>by signing up, you agree to our terms of use and privacy policy.</p>
        <div style={{ marginBottom: "0.25rem" }}>
          <Link to="/login" className="button-hover-underline flex-align-center"><Icon.ChevronLeft /> <b>return to login</b></Link>
        </div>
        <div />
      </form>
    </div>
  );
}